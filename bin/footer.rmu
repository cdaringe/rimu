/*
  Used by rimuc.js --styled option.
*/

// Close contents div.
</div>

{--highlightjs!}<script src="http://yandex.st/highlightjs/7.3/highlight.min.js"></script><script>hljs.initHighlightingOnLoad();</script>

{--mathjax!}<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<script>
window.onload = function() {
  // Generate header slugs and build table of contents.
  var toc = document.getElementById('toc');
  var headings = [].slice.call(document.body.querySelectorAll('#contents>h1, #contents>h2, #contents>h3'));
  headings.forEach(function(heading) {
    var title = heading.textContent;
    var id = heading.getAttribute('id');
    if (!id) {
      id = slugify(title);
      heading.setAttribute('id', id);
    }
    if (toc) {
      // Append TOC entry.
      var tocLink = document.createElement('a');
      tocLink.setAttribute('href', '#' + id);
      tocLink.textContent = title;
      var tocEntry = document.createElement('div');
      tocEntry.setAttribute('class', heading.tagName.toLowerCase());
      tocEntry.appendChild(tocLink);
      toc.appendChild(tocEntry);
    }
  });
{--debug!}  checkUrlFragments();
{--debug!}  showDiagnostics();
}
function slugify(text) {
  var slug = text.replace(/\s+/g, '-') // Replace spaces with dashes.
      .replace(/[^\w-]/g, '')          // Retain alphanumeric, '-' and '_' characters.
      .toLowerCase()
  if (!slug) slug = 'x';
  if (document.getElementById(slug)) { // Another element already has that id.
    var i = 2, prefix = slug;
    while (document.getElementById(slug = prefix + '-' + i++)) {}
  }
  return slug;
}
</script>

{--debug=}.+skip
<script>
function checkUrlFragments() {
  // Highlight broken local URL fragments.
  var links = [].slice.call(document.body.getElementsByTagName('a'));
  links.forEach(function(link) {
    var url = link.getAttribute('href');
    if (url[0] === '#' && !document.getElementById(url.slice(1))) {
      link.classList.add('broken-fragment');
    }
  });
}
function showDiagnostics() {
  // Display diagnostic messages.
  var diagnostics = document.getElementById('diagnostics');
  if (diagnostics) {
    function diagnosticMessage(title, nodes, callback) {
      title = '<u>' + nodes.length + ' ' + title + (nodes.length === 1 ? '' : 's') + ':</u>';
      return [].slice.call(nodes).reduce(callback, title);
    }
    var broken_links = document.body.querySelectorAll('.broken-fragment');
    var undefined_macros = document.body.querySelectorAll('.undefined-macro');
    var message = '';
    if (broken_links.length > 0) {
      message += '<p>' + diagnosticMessage('broken link', broken_links,
          function (previous, current) { return previous + ' ' + current.getAttribute('href');}) + '</p>';
    }
    if (undefined_macros.length > 0) {
      message += '<p>' + diagnosticMessage('undefined macro', undefined_macros,
          function (previous, current) { return previous + ' ' + current.textContent;}) + '</p>';
    }
    if (message) {
      diagnostics.innerHTML = message;
    }
  }
}
</script>

</body>
</html>
