# Rimu Tips


## HTML is valid Rimu
You are free to mix any valid HTML into a Rimu document &mdash; no
special syntax or relearning  is required (in this sense Rimu can be
thought of as an HTML superset).


## Converting Rimu to PDF
First convert Rimu markup to HTML using the `rimuc` tool and then
convert the HTML to PDF.  Here are a few options for converting HTML
to PDF:

. Open the HTML document in [LibreOffice](https://www.libreoffice.org/)
  Writer and export as PDF, this does a good job especially if you use
  the `rimuc` `--styled` option.
. Google's Chrome web browser has an option to print HTML to a PDF
  file, other browsers have PDF add-ons that perform the same
  function.
. Use an HTML to PDF conversion program such as
  [HTMLDOC](http://www.htmldoc.org/).


## Extend Rimu with Macros
Macros provide a simple, consistent mechanism for extending the Rimu
markup vocabulary. For example:

.-macros
{macros-example} = '{sidebar} = '#### $1
.[style="padding-left: 10px; border-left: 4px solid silver; margin-bottom: 1em;"]'\
{info} = '<span class="label label-info">$1</span>'\
{heads-up} = '{info|Heads up!}'\
{note} = '{info|Note} <mark>$1</mark>'\
{playground} = '[Rimu Playground](http://srackham.github.io/rimu/rimuplayground.html)'\

{sidebar|Fun with Macros}
..
{heads-up} See the {playground} for documentation and hands-on
experimentation.

{note|This document is not yet finished.}
..'

{generate-rendered-example-2|macros-example}

- The `{sidebar}` macro shows how you can inject CSS styles into a
  _Division Block_, but a better way of styling block elements is to
  use <#scoped-css|scoped CSS>.
- Note how macro definitions can span multiple lines and can contain
  any valid Rimu markup (including HTML and blank lines).
- [This document](https://github.com/srackham/rimu/blob/master/doc/tips.rmu)
  makes extensive use of Rimu macros.


## Intra-document Links
To link to another place within a document: Create an ID for the
element you want to link to (using the Rimu _Block Attribute_ element)
then create a link to it using a fragment identifier URL. For example:

{document-links-example} = '.#link-target
This paragraph has ID `link-target`.

<#link-target|This link> takes you to
the above paragraph.

// Markdown compatible syntax.
So does [this link](#link-target).'

{generate-rendered-example-1|document-links-example}


.#syntax-highlighting
## Code syntax highlighting
The _rimuc_ tool `--styled` option can be used to enable code syntax
highlighting in Rimu Code blocks and Indented paragraphs using the
[Highlight.js](https://github.com/isagalaev/highlight.js) syntax
highlighter. integration is achieved using macros and is not baked in to Rimu
so you are free to use other syntax highlighters.

The _rimuc_ tool `--styled` option includes _Highlight.js_ if you set
the `\{--highlightjs}` macro to a non-blank value.  _Highlight.js_
automatically detects the language in Code Blocks and Indented
Paragraphs.

You can set the language explicitly by injecting the
language CSS class name into the code block. Here are two examples:
the first uses GFM style syntax, the second uses Rimu's Block Attributes
element:

{highlightjs-example} = '\{--highlightjs} = 'yes'\

``` javascript
if (message) {
  console.error('Error: ' + message);
}
```
.python
``
x = 1
if x == 1:
    print "x is 1."
``'

{generate-rendered-example-1|highlightjs-example}

Set the `no-highlight` class to disable syntax highlighting for a code
block.  Adding the `no-highlight` class to all code blocks using
_Delimited Block Definitions_ turns off highlighting
unless the language class is explicitly set. The [example .rimurc
file](https://github.com/srackham/rimu/blob/master/examples/.rimurc)
does this with these custom definitions:

  |code| = '<pre class="no-highlight"><code>|</code></pre>'
  |indented| = '<pre class="no-highlight"><code>|</code></pre>'


.#markdown-compatible
## Syntax shared with Markdown
The following subset of _Rimu_ elements is compatible with Markdown:

Headers:: Headers using `#` character header IDs.

Code blocks::
- Indented paragraphs (at least four spaces) render like Markdown code
  blocks.
- Rimu backtick delimited Code blocks are compatible with
  [GitHub Flavored Markdown](https://help.github.com/articles/github-flavored-markdown/)
  _Fenced Blocks_.

Quote paragraphs:: Paragraphs starting with a `>` character are
rendered like Markdown Blockquotes.

Text formatting::
- `_emphasis_`, `*emphasis*`, `__bold__`, `**bold**`,
  ```code``` , ````code```` quoting.
- `~~strikethrough~~` quotes (GitHub Flavored Markdown behaviour).
- Underscores within words rendered verbatim and are not treated as
  underscore emphasis quotes (Github Flavored Markdown behaviour).

Lists::
- Bullet lists with `-`, `+`  and `*` IDs.
- Numbered lists with explicit numbering.

URLs and Email addresses:: `[caption](url)`, `<url>` and `<email>`
syntaxes plus Github Flavored Markdown _URL autolinking_.

Images:: `![alt](url)` syntax.

The Rimu _README_ uses this subset for compatibility with _GitHub_ and
_npmjs.org_ README formats.


## Escaping Rimu syntax
If you have text that you don't want interpreted as a Rimu
element then you can render it literally (escape it) by prefixing the
element with a backslash character.

Here are some examples:

{escaped-elements-example} = '\_escaped quote_

**escaped closing\** quote**

``backticks in `code quote```

\# Escaped header.'

{generate-rendered-example-1|escaped-elements-example}

NOTE: The text inside _code_ quotes is always rendered verbatim -- to
include backtick characters in code quotes use double-backtick quotes.


## Passing macro values into Rimu documents
You can do this by prepending text containing macro definitions to
Rimu source before rendering the source. The _rimuc_ command has a
`--prepend` option that can be used to do this.

Alternatively you could also put macro definitions in a
separate file and specify it as the first Rimu source file in the
_rimuc_ command.

The following example sets the HTML _title_ in the `kotlin-notes.html`
output document:

  rimuc --styled --prepend "{--title}='Kotlin Notes'" kotlin-notes.rmu


## The Rimu markup looks correct but the generated HTML is wrong
Using an editor with Rimu syntax highlighting support (see previous
topic) makes it much easier to spot syntax errors.  Rimu includes a
Vim editor syntax highlighter, see the _Tools_ section of the [Rimu
Playground](http://srackham.github.io/rimu/rimuplayground.html) for
details.


## Extending the Vim syntax highlighter
If you've added custom replacements and quotes you can highlight them
in Vim by creating a custom `~/.vim/after/syntax/rimu.vim` syntax
file (Vim loads files from the `after` directory after loading normal
syntax files).  The distributed [example ~/.vim/after/syntax/rimu.vim
syntax file](https://github.com/srackham/rimu/blob/master/examples/rimu.vim)
highlights custom syntax definitions from the [example .rimurc
file](https://github.com/srackham/rimu/blob/master/examples/.rimurc).


## Render contiguous Indented paragraphs with a single element
When you have multiple Indented paragraphs separated by blank lines
the usual expectation is that they will be contained in a single
listing -- to achieve this separate the paragraphs with lines
containing one or more space characters:

{joined-paragraphs-example} = '#### Separator line is blank

  Neque a massa. Porttitor
  consectetuer commodo.

  Neque a massa. Porttitor
  consectetuer commodo.


#### Separator line with spaces

  Neque a massa. Porttitor
  consectetuer commodo.
  
  Neque a massa. Porttitor
  consectetuer commodo.


#### Use a code block instead

```
Neque a massa. Porttitor
consectetuer commodo.

Neque a massa. Porttitor
consectetuer commodo.
```'

{generate-rendered-example-1|joined-paragraphs-example}


## Entering non-keyboard characters
Characters that are unavailable on your keyboard can be entered as 
[HTML character entities](http://dev.w3.org/html5/html-author/charref)
e.g. enter `&micro;` to display &micro;. The 
[example .rimurc file](#example-rimurc)
includes replacements for common use-cases such as em dash, ellipsis and
quotation characters.


.#defs-warning
## Use Replacement and Quote definitions sparingly
Adding new Replacement and Quote definitions changes the Rimu syntax
which can produce unexpected results. It can also make your Rimu
source non-portable and less readable.


.#example-rimurc
## Example .rimurc file
The Rimu distribution includes an [example .rimurc
file](https://github.com/srackham/rimu/blob/master/examples/.rimurc)
containing useful macros, quotes and replacement definitions.

It is important to note that these niceties have been defined in
Rimu Markup -- Rimu has been extended using Rimu. No plugins
or special configuration file syntax were necessary.
Example usage:

{rimurc-examples} = 'Turn <- left then right ->

Pencil \{icon|pencil} file \{icon|file}
and trash \{icon|trash} icons.

Copyright (C) 2015 -- trademarked(TM).

"Left and right double-quotes",
'left and right single-quotes'.

The 3\{sup|rd} H\{sub|2}O molecule...

IMPORTANT: Admonition.

TODO 10 examples +-2'

{generate-rendered-example-1|rimurc-examples}


.#scoped-css
## Use scoped CSS to generate custom styled elements
HTML5's [scoped CSS
attribute](http://www.w3schools.com/tags/att_style_scoped.asp)
allows you to define CSS outside the document header.  This allows you
to include CSS in the body of a Rimu document which is very handy for
tweaking the default CSS and for styling Rimu block elements.
Examples:

{scoped-css-example} = '<style type="text/css" scoped>
.verse {
  margin: 1.5em 20px;
}
div.verse p, p.verse {
  font-family: serif;
  white-space:pre;
}
.sidebar {
  border: 1px solid silver;
  border-radius:4px;
  background: #ffffee;
  padding: 10px;
  margin: 1.5em 20px;
}
div.sidebar *:first-child {
  margin-top: 0.2em;
}
</style>

.verse
Neque a massa.
Porttitor consectetuer commodo.

.verse
..
#### Lorum Ipsum
Neque a massa.
Porttitor consectetuer commodo.

Nunc mauris tempor.
Pede mauris sed.
Scelerisque feugiat massa alias.
..

.sidebar
Neque a massa.
Porttitor consectetuer commodo.

.sidebar
..
#### Lorum Ipsum
Neque a massa.
Porttitor consectetuer commodo.

Nunc mauris tempor.
Pede mauris sed.
Scelerisque feugiat massa alias.
..'

{generate-rendered-example-1|scoped-css-example}

- The above _verse_ and _sidebar_ CSS styles are automatically
  included when you use the _rimuc_ tool `--styled` option.
- HTML5 stipulates that scoped _style_ element must be the first child
  element -- in practice  most browsers don't care where it occurs.


## Using Macro, Replacement and Quote definitions in Safe Mode
_Macro_, _Replacement_ and _Quote_ definitions are not processed in
Safe Mode. To apply Macro, Replacement or Quote definitions to Rimu
markup that is processed in Safe Mode you need to load the definitions with a
separate API call, for example:

```
Rimu.render(trusted_rimu_definitions, {safeMode: 0});
var html = Rimu.render(untrusted_rimu_markup, {safeMode: 1});
```


## Mathematical formulae using MathJax
You can include math formulas written in LaTeX or MathML using
[MathJax](http://www.mathjax.org/). The `rimuc` command `--styled`
option will include MathJax support if the `\{--mathjax}` macro is
defined. Examples:

.-macros
{mathjax-example} = '{--mathjax} = 'yes'\

.-macros
A LaTeX inline formula: \(\sum_{i=0}^n i^2 = \frac{n^2+n}m{2}\)

A LaTeX block formula:

.-macros
\[\sum_{i=0}^n i^2 = \frac{n^2+n}m{2}\]

A MathML inline formula:
<math>
  <mi>E</mi><mo>=</mo><mrow><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow>
</math>

A MathML block formula:

<math display="block">
  <mi>E</mi><mo>=</mo><mrow><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow>
</math>'

{generate-rendered-example-2|mathjax-example}

NOTE: Macro expansion has been disabled in LaTeX formulas to stop
`{i=0}` and `{2}` from being mistaken for Rimu macro invocations.

See the [latest MathJax
documentation](http://docs.mathjax.org/en/latest/) to learn how to use
MathJax.

As with [code syntax highlighting](#syntax-highlighting), this
behaviour is achieved using macros and is not baked in to Rimu.


## Inline Comments
Rimu comment elements are block elements and cannot be used inline --
use the reserved `--` macro for this purpose:

  {--!}This line is skipped,
  and {--|this text is skipped}.

See also <#conditional-inclusion|Conditional Inclusion>.

/*
You could also implement inline `//` style single-line comments with
the following custom Replacement definition:

  /(^|\n)\\?\/\/.*(?=\n|$)/g = '$1'

*/

.#conditional-inclusion
## Conditional Inclusion
Macro invocations can be used to conditionally include source text.

Single-line Blocks::
..
Single-line block elements (e.g. Headers, Block Attributes,
single-line Paragraphs and single-line HTML blocks) can be
conditionally excluded by prefixing an _Inclusion_ macro invocation.
For example:

  {underscore!}<script src="underscore-min.js"></script>

The line is skipped if the value of `underscore` is blank (`''`).
This works because lines (in a block context) that begin with a macro
invocation are initially processed as _Line Macro_ elements.
..

Delimited Blocks, HTML Blocks and Paragraphs::
..
To conditionally exclude these multi-line block elements enable the
`+skip` option with a preceding _Attribute Block_ element. For
example:

  {foo!}.+skip
  **Lorem ipsum dolor**. Sit amet venenatis. Erat nulla arcu. Lorem
  luctus sem. Mauris vitaei ipsum.

If macro `foo` value is blank (`''`) then the `.+skip` Attribute Block
will be processed which causes the following paragraph to be skipped.
..

Inline content::
..
If an element supports macro expansion (e.g. Paragraphs and HTML
Blocks), then block content can be conditionally included using:

. _Inclusion_ macro invocations to exclude lines of text, for example:

  {foo=} Line is included if macro foo value is blank.
  {foo!} Line is included if macro foo value is not blank.
  {foo=one} Line is included if macro foo value is 'one'.
  {foo=two} Line is included if macro foo value is 'two'.
  {foo=\d+} Line is included if macro foo value is a number.

. _Parametrized_  macro invocations to exclude arbitrary portions of
  inline text, for example:
...
```
{foo} = ''
Mauris vitae ipsumi lacus vestibulum sem. {foo|This text
is excluded}

{foo} = '$1'
Mauris vitae ipsumi lacus vestibulum sem. {foo|This text
is included.}
```
The macro parameter text is excluded if value of the `foo` macro is blank
-- set it to `$1` and the text will be included. Note that
parameter text can be spread over multiple lines.
...
..


## Tables
Create tables using the HTML table syntax (Rimu has no special syntax
for tables).

You can use Rimu markup in table cells, just remember that HTML blocks
must start at the left margin and end with a blank line.

The `rimuc` `--styled` option includes
[Bootstrap](http://getbootstrap.com/) so you can use
[Bootstrap tables classes](http://getbootstrap.com/css/#tables) to
create nicely formatted tables. For example:

.-macros
{tables-example} = '<table class="table table-bordered">
  <tbody>
    <tr>
<td style="width: 50%;">

.text-info
**Lorem ipsum dolor**. Sit amet venenatis. Erat nulla arcu. Lorem luctus
sem. Mauris vitae ipsum. Donec dui ac ridiculus quisque proin.
Lobortis lacus vestibulum sem.

##### Normal paragraph
Lorem ipsum dolor. Sit `amet venenatis`. Erat nulla arcu. Lorem luctus
sem. _Mauris vitae_ ipsum. Donec dui ac ridiculus {mark|quisque} proin.
Lobortis lacus vestibulum sem.

##### Indented paragraph
  Neque a massa. Porttitor consectetuer commodo. Nunc nulla tempor
  tempor enim ornare. Mi nam id. Ornare mauris tempor. Pede mauris
  sed.  Scelerisque feugiat massa alias.

</td>
<td style="width: 50%;">

- Lorem ipsum dolor sit amet dis quisque maecenas in tristique arcu
- lorem dolor fusce nec.
  * Sit pretium quisque in wisi lobortis.
  * Ac curabitur elementum.
    ** Platea ad diam arcu vitae fermentum.
       1. Eu lorem nulla.
       2. In suspendisse at dapibus nostra est.
          .. Montes adipiscing sodales.
    ** Pellentesque nibh sit.

- Augue et dui malesuada purus.

  If a list item is followed
  by an indented paragraph the
  indented paragraph is
  included in the list item.

</td>
    </tr>
  </tbody>
</table>'

{generate-rendered-example-2|tables-example}


## Macro meta-programming
You can define macros which, when invoked, generate other macros. A
good example of this is the generation of document section headers,
links and table of contents entries from a section identifier and
title:

.-macros
{meta-macros-example} = '// toc macro generates section TOC entry, link macro, header macro.
// $1 = section ID, $2 = section title.
{toc} = '{$1} = '<#$1|$2>' \\
{$1-header} = '.#$1
## $2' \\
{$1}
'\

#### Table of Contents
{toc|section1|Section One}
{toc|section2|Section Two}

// Section One.
{section1-header}
Link to {section2}.

// Section Two .
{section2-header}
Link to {section1}.'

{generate-rendered-example-2|meta-macros-example}

NOTE: The backslash character is used to continue macro definition
lines that end with a single-quote.


## Macro tips
- Use the `&vert;` character entity to display a `|` character inside
  a macro parameter value.
- Closing block delimiters must be explicit and cannot be sourced from
  a macro invocation (because Rimu elements are recognized before
  macro expansion).
- The contents of a macro can be rendered verbatim in a code block by
  enabling macro expansion. For example:
..
``
.+macros
```
{example-42}
```
``

The contents of `{example-42}` are not subject to further macro expansion.
..
- Definition elements cannot be prefixed with an Inclusion macro (see
  <#conditional-inclusion|Conditional Inclusion>).
- Macro invocations in macro definition values are expanded when the
  macro is declared, not when it is invoked. You can defer evaluation
  until the macro is invoked by escaping macro invocations or (in the
  case of multi-line definitions) by using the `-macros` _Block
  Attributes_ option. For example this Rimu markup:
..
```
{m1} = 'foo'
{m2} = '{m1} \{m1}'
{m2}

{m1} = 'bar'
{m2}
```

Generates:

```
<p>foo foo</p>
<p>foo bar</p>
```
..


## List item counters
In addition to the _verse_ and _sidebar_ CSS styles the  _rimuc_ tool
`--styled` option also includes CSS classes for counting list items
and for numbering labeled list items:

{list-item-counters-example} = '#### Numbered labeled list
.dl-numbered
One:: Item one.
Two:: Item two.
Three:: Item three.

.dl-counter
labeled list items.

#### Counted unordered list
- Item one.
- Item two.
- Item three.
- Item four.

.ul-counter
unordered list items.

#### Counted ordered list
. Item one.
. Item two.

.ol-counter
ordered list items.'

{generate-rendered-example-1|list-item-counters-example}


## Section numbering
If you define the `--section-numbers` macro the  _rimuc_ tool
`--styled` option will emit CSS to automatically number _h2_ sections
and _h3_ sub-sections. You need to define the `--section-numbers`
macro on the command-line (using the `--prepend` option) or in your
`.rimurc` file. For example:

  rimuc --styled --prepend "{--section-numbers}='yes'" mydoc.rmu


## Nested Delimited Blocks
Delimited blocks of the same type can be nested by using differing
numbers of delimiter characters to distinguish between them. Here is
an example of a Quote block nested within a Quote block:

{nested-delimited-blocks-example} = '""
Urna aliquam pid, pulvinar augue ut
aenean enim cum lectus sed, duis odio
lectus, augue non egestas amet? Magna
lectus?

"""
Enim ultricies odio rhoncus ultrices,
porttitor augue a amet, pulvinar
adipiscing in dictumst in, enim integer
vel mauris placerat in phasellus magna.
Nisi! Amet.
"""

Duis in tincidunt rhoncus nascetur
lacus!
""'

{generate-rendered-example-1|nested-delimited-blocks-example}


## List termination
List termination can be forced by following the list by two or more blank
lines. This comes in handy if you want to follow one list immediately by
another or if you want to separate an Indented paragraph from a
preceding list item.


## Nested list item ambiguity
To render an indented list item as an Indented paragraph change it
to a delimited code block, for example:

{list-ambiguity-example} = '- List item.

  * Rendered as nested list item.

- List item.
``
* Rendered as code block.
``'

{generate-rendered-example-1|list-ambiguity-example}
