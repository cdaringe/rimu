# Rimu Tips

TIP: Click the _Edit icon_ {icon|edit} in the examples below to enable
live example editing of the Rimu source.

## HTML is valid Rimu
You are free to mix any valid HTML into a Rimu document &mdash; no
special syntax or relearning  is required (in this sense Rimu can be
thought of as an HTML superset). Just remember that included HTML is
only processed if `safeMode` is zero.


## Converting Rimu to PDF
First convert Rimu markup to HTML using the {rimuc} tool and then
convert the HTML to PDF.  Here are a few options for converting HTML
to PDF:

. Google's Chrome web browser has an option to print HTML to a PDF
  file, other browsers have PDF add-ons that perform the same
  function, this does a good job especially if you use the {rimuc}
  `--styled` option.
. Use an HTML to PDF conversion program such as
  [HTMLDOC](http://www.htmldoc.org/).


## Extend Rimu with Macros
Macros provide a simple, consistent mechanism for extending the Rimu
markup vocabulary.

.-macros
{macros-example} = '// Define some macros.
{info} = '<span class="label label-info">$1</span>'\
{heads-up} = '{info|Heads up!}'\
{note} = '{info|Note} <mark>$1</mark>'\
{playground} = '[Rimu Playground](http://srackham.github.io/rimu/rimuplayground.html)'\
{sidebar} = '#### $1
."padding-left: 10px; border-left: 4px solid silver; margin-bottom: 1em;"'\

// Use the macros.
{sidebar|Fun with Macros}
..
{heads-up} See the {playground} for documentation and hands-on
experimentation.

{note|This document is not yet finished.}
..'

{generate-rendered-example-2|macros-example}

- The `\{sidebar}` macro shows how you can inject CSS styles into a
  _Division Block_ (you could also use use <#scoped-css|scoped CSS> to
  style the output).
- Note how macro definitions can span multiple lines and can contain
  any valid Rimu markup (including HTML and blank lines).
- [This document](https://github.com/srackham/rimu/blob/master/doc/tips.rmu)
  makes extensive use of Rimu macros.


## Intra-document Links
To link to another place within a document: Create an ID for the
element you want to link to (using the Rimu _Block Attribute_ element)
then create a link to it using a fragment identifier URL.

{document-links-example} = '.#link-target
This paragraph has ID `link-target`.

<#link-target|This link> takes you to
the above paragraph.

// Markdown compatible syntax.
So does [this link](#link-target).'

{generate-rendered-example-1|document-links-example}

NOTE: The [rimuc]({reference}#rimuc-command) `--styled` option
automatically synthesises `id` attributes for top level `#`, `##` and
`###` header elements that do not already have an `id`.


.#syntax-highlighting
## Source code syntax highlighting
The {rimuc} command can highlight code in Rimu _Code Blocks_ and
_Indented Paragraphs_ using the
[Highlight.js](https://github.com/isagalaev/highlight.js) syntax
highlighter.  To include _Highlight.js_ support use the {rimuc}
command `--highlightjs` option with the `--styled` option.

Set the language you want to highlight by injecting the language CSS
class name into the code block.  Here are two examples, the first uses
Github Flavored Markdown style syntax, the second uses Rimu's _Block
Attributes_ element:

{highlightjs-example} = 'Some JavaScript code:

``` javascript
if (message) {
  console.error('Error: ' + message);
}
```

Some Python code:

.python
``
x = 1
if x == 1:
    print "x is 1."
``'

// Don't allow editing because syntax highlighting occurs at page load time.
{generate-rendered-example-1|highlightjs-example|no-edit}

Set the `no-highlight` class to disable syntax highlighting for a code
block.  Adding the `no-highlight` class to all code blocks using
_Delimited Block Definitions_ turns off highlighting unless the
language class is explicitly set. The [example .rimurc
file]({example-rimurc}) does this with these custom definitions:

  |code| = '<pre class="no-highlight"><code>|</code></pre>'
  |indented| = '<pre class="no-highlight"><code>|</code></pre>'


.#markdown-compatible
## Syntax shared with Markdown
The following subset of _Rimu_ elements is compatible with Markdown:

Headers:: Headers using `#` character header prefixes.

Code blocks::
- Indented paragraphs (at least four spaces) render like Markdown code
  blocks.
- Rimu Fenced Code blocks with three or more backticks are compatible with
  [GitHub Flavored Markdown](https://help.github.com/articles/github-flavored-markdown/)
  _Fenced Blocks_.

Quote paragraphs:: Paragraphs starting with a `>` character are
rendered like Markdown Blockquotes.

Text formatting::
- `_emphasis_`, `*emphasis*`, `__bold__`, `**bold**`,
  ```code``` , ````code```` quoting.
- `~~strikethrough~~` quotes (GitHub Flavored Markdown behaviour).
- Underscores within words rendered verbatim and are not treated as
  underscore emphasis quotes (Github Flavored Markdown behaviour).

Lists::
- Bullet lists with `-`, `+`  and `*` prefixes.
- Numbered lists with explicit numbering.

URLs and Email addresses:: `[caption](url)`, `<url>` and `<email>`
syntaxes plus Github Flavored Markdown _URL autolinking_.

Images:: `![alt](url)` syntax.

The Rimu _README_ uses this subset for compatibility with _GitHub_ and
_npmjs.org_ README formats.


## Escaping Rimu syntax
If you have text that you don't want interpreted as a Rimu
element then you can render it literally (escape it) by prefixing the
element with a backslash character.

{escaped-elements-example} = '\_escaped quote_

**escaped closing\** quote**

``backticks in `code quote```

\# Escaped header.'

{generate-rendered-example-1|escaped-elements-example}

NOTE: The text inside _code_ quotes is always rendered verbatim -- to
include backtick characters in code quotes use double-backtick quotes.


## Passing macro values into Rimu documents
You can do this by prepending text containing macro definitions to
Rimu source before rendering the source. The {rimuc} command has a
`--prepend` option that can be used to do this.

Alternatively you could also put macro definitions in a
separate file and specify it as the first Rimu source file in the
{rimuc} command.

The following example sets the {rimuc} `--title` macro value, this
sets the HTML _title_ in the `kotlin-notes.html` output document:

  rimuc --styled --prepend "{--title}='Kotlin Notes'" kotlin-notes.rmu

{rimuc} has a `--title` shortcut comand-line option for this common
use-case:

  rimuc --styled --title "Kotlin Notes" kotlin-notes.rmu

Other macro shortcut options can be found in the {rimuc}
documentation.


## The Rimu markup looks correct but the generated HTML is wrong
Using an editor with Rimu syntax highlighting support (see previous
topic) makes it much easier to spot syntax errors.  Rimu includes a
Vim editor syntax highlighter, see the [Vim syntax
file](http://srackham.github.io/rimu/reference.html#vim-syntax-file)
section in the [Rimu
Reference](http://srackham.github.io/rimu/reference.html) for details.


## Extending the Vim syntax highlighter
If you've added custom replacements and quotes you can highlight them
in Vim by creating a custom `~/.vim/after/syntax/rimu.vim` syntax
file (Vim loads files from the `after` directory after loading normal
syntax files).  The distributed example
[~/.vim/after/syntax/rimu.vim](https://github.com/srackham/rimu/blob/master/src/examples/example-rimurc.vim)
syntax file highlights custom syntax definitions from the [example
.rimurc file]({example-rimurc}).


## Render contiguous Indented paragraphs with a single element
When you have multiple Indented paragraphs separated by blank lines
the usual expectation is that they will be contained in a single
listing -- to achieve this separate the paragraphs with lines
containing one or more space characters.

{joined-paragraphs-example} = '#### Separator line is blank

  Neque a massa. Porttitor
  consectetuer commodo.

  Neque a massa. Porttitor
  consectetuer commodo.


#### Separator line with spaces

  Neque a massa. Porttitor
  consectetuer commodo.
  
  Neque a massa. Porttitor
  consectetuer commodo.


#### Use a code block instead

```
Neque a massa. Porttitor
consectetuer commodo.

Neque a massa. Porttitor
consectetuer commodo.
```'

{generate-rendered-example-1|joined-paragraphs-example}


## Entering non-keyboard characters
Characters that are unavailable on your keyboard can be entered as 
[HTML character entities](http://dev.w3.org/html5/html-author/charref)
e.g. enter `&micro;` to display &micro;. The 
[example .rimurc file](#example-rimurc)
includes replacements for common use-cases such as em dash, ellipsis and
quotation characters.


.#defs-warning
## Use Replacement and Quote definitions sparingly
Adding new Replacement and Quote definitions changes the Rimu syntax
which can produce unexpected results. It can also make your Rimu
source non-portable and less readable.


.#example-rimurc
## Example .rimurc file
The Rimu distribution includes an [example .rimurc
file]({example-rimurc}) containing useful macros, quotes and
replacement definitions.

It is important to note that these niceties have been defined in
Rimu Markup -- Rimu has been extended using Rimu. No plugins
or special configuration file syntax were necessary.

{rimurc-examples} = 'Turn <- left then right ->

Pencil \{icon|pencil} file \{icon|file}
and trash \{icon|trash} icons.

Copyright (C) 2015 -- trademarked(TM).

"Left and right double-quotes".

The 3\{sup|rd} H\{sub|2}O molecule...

IMPORTANT: Admonition.

TODO 10 examples +-2'

{generate-rendered-example-1|rimurc-examples|no-edit}


.#scoped-css
## Custom styling
You can include custom CSS styles in the body of a Rimu document using
a [scoped]((http://www.w3schools.com/tags/att_style_scoped.asp) HTML
`style` element. Here are three use-cases:

. Change existing styling. The following example changes the color of
  all headers to red:
``
<style scoped>
  h1, h2, h3, h4, h5, h6 {
    color: red;
  }
</style>
``

. Add a new block style. The following example puts a green border
  around blocks with the `green-border` class:
``
<style scoped>
  .green-border {
    border: 5px solid green;
  }
</style>

.green-border
Green is the color of envy.
``

. Create new [themes](#themes) and tweak existing themes.

IMPORTANT: The `style` element must not contain any blank lines because
Rimu HTML block elements are terminated with a blank line

Normally you would want the style to apply to your entire document so
put the `style` elements at the top level i.e. not nested inside other
block elements.  HTML5 stipulates that scoped _style_ element must be
the first child element -- but in practice  most browsers don't care
where it occurs.


## Themes
A _theme_ is the overall typographical style of the rendered HTML
document.  You can tailor the theme using [custom CSS style
elements](#scoped-css).

The {rimuc} command supports named themes with the `--theme` option,
all this does is set the `--theme` macro value which is then used to
[conditionally include](#conditional-inclusion) HTML `style` elements.

The following example styles the output using the built-in _graystone_
theme:

  rimuc --styled --theme graystone document.rmu

You can create your own themes or tweak existing themes by
[conditionally including](#conditional-inclusion) HTML `style`
elements.  Here is an example theme named _redheads_:

``
{--theme!.*\bredheads\b.*}.+skip
<style scoped>
  h1, h2, h3, h4, h5, h6 {
    color: red;
  }
</style>
``

The HTML `style` element will be included when the `--theme` macro
value includes the word `redheads`, for example:

  rimuc --styled --theme redheads document.rmu

You can combine themes by specifying more than one theme, for example:

  rimuc --styled --theme "graystone redheads" document.rmu

NOTE: If you specify multiple themes their CSS styles will casacade in
the order they are processed in the Rimu source documents.


## Verse and sidebar styles
The {rimuc} command `--styled` option includes _verse_ and _sidebar_
CSS styles for poetry and highlighted passages of text.

{verse-and-sidebar-example} = 'Verse styled paragraph:

.verse
Neque a massa.
Porttitor consectetuer commodo.

Verse styled Division Block:

.verse
..
#### Lorum Ipsum
Neque a massa.
Porttitor consectetuer commodo.

Nunc mauris tempor.
Pede mauris sed.
Scelerisque feugiat massa alias.
..

Sidebar styled paragraph:

.sidebar
Neque a massa.
Porttitor consectetuer commodo.

Sidebar styled Division Block:

.sidebar
..
#### Lorum Ipsum
Neque a massa.
Porttitor consectetuer commodo.

Nunc mauris tempor.
Pede mauris sed.
Scelerisque feugiat massa alias.
..'

{generate-rendered-example-1|verse-and-sidebar-example}


## Using Macro, Replacement and Quote definitions in Safe Mode
_Macro_, _Replacement_ and _Quote_ definitions are not processed in
Safe Mode. To apply Macro, Replacement or Quote definitions to Rimu
markup that is processed in Safe Mode you need to load the definitions
with a separate API call, for example:

``` javascript
Rimu.render(trusted_rimu_definitions, {safeMode: 0});
var html = Rimu.render(untrusted_rimu_markup, {safeMode: 5});
```


## Mathematical formulae
The {rimuc} command supports [MathJax](http://www.mathjax.org/) LaTeX
and MathML mathematical formulas.  To include _MathJax_ support use
the {rimuc} command `--mathjax` option with the `--styled` option.

.-macros
{mathjax-example} = '.-macros
A LaTeX inline formula: \(\sum_{i=0}^n i^2 = \frac{n^2+n}m{2}\)

A LaTeX block formula:

.-macros
\[\sum_{i=0}^n i^2 = \frac{n^2+n}m{2}\]

A MathML inline formula:
<math>
  <mi>E</mi><mo>=</mo><mrow><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow>
</math>

A MathML block formula:

<math display="block">
  <mi>E</mi><mo>=</mo><mrow><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow>
</math>'

{generate-rendered-example-2|mathjax-example|no-edit}

NOTE: Macro expansion has been disabled in LaTeX formulas to stop
`\{i=0}` and `\{2}` from being mistaken for Rimu macro invocations.

See the [latest MathJax
documentation](http://docs.mathjax.org/en/latest/) to learn how to use
MathJax.


.#conditional-inclusion
## Conditional Inclusion
Macro invocations can be used to conditionally include source text.
Examples:

``
// Include script if `underscore` value is non-blank.
{foo!}<script src="foo-min.js"></script>

// Include paragraph if `foo` is blank.
{foo=}.+skip
Macro `foo`
must be blank.

// Conditional execution of Rimu definitions.
// The block never generates output because empty divs are not emitted.
// Assign `x` and `y` macro values if `foo` and `bar` are non-blank.
{foo=}.+skip
{bar=}.+skip
..
{x} = '42'
{y} = '24'
..

// Inline examples.
This line is included {foo=} if foo value is blank.
This line is included {foo!} if foo value is not blank.
This line is included {foo=one} if foo value is 'one'.
This line is included {foo=two} if foo value is 'two'.
This line is included {foo!\d+} if foo value is not a number.

// Use parametrized macros to exclude arbitrary inline text.
{foo} = ''
Mauris vitae {foo|This text is excluded}

{foo} = '$1'
Mauris vitae {foo|This text is included}
``


## Tables
Create tables using the HTML table syntax (Rimu has no special syntax
for tables).

You can use Rimu markup in table cells, just remember that HTML blocks
must start at the left margin and end with a blank line.

The {rimuc} `--styled` option includes
[Bootstrap](http://getbootstrap.com/) so you can use
[Bootstrap tables classes](http://getbootstrap.com/css/#tables) to
create nicely formatted tables.

.-macros
{tables-example} = '<table class="table table-bordered">
  <tbody>
    <tr>
<td style="width: 50%; padding: 6px;">

.text-info
**Lorem ipsum dolor**. Sit amet venenatis. Erat nulla arcu. Lorem luctus
sem. Mauris vitae ipsum. Donec dui ac ridiculus quisque proin.
Lobortis lacus vestibulum sem.

##### Normal paragraph
Lorem ipsum dolor. Sit `amet venenatis`. Erat nulla arcu. Lorem luctus
sem. _Mauris vitae_ ipsum. Donec dui ac ridiculus {mark|quisque} proin.
Lobortis lacus vestibulum sem.

##### Indented paragraph
  Neque a massa. Porttitor consectetuer commodo. Nunc nulla tempor
  tempor enim ornare. Mi nam id. Ornare mauris tempor. Pede mauris
  sed.  Scelerisque feugiat massa alias.

</td>
<td style="width: 50%; padding: 6px;">

- Lorem ipsum dolor sit amet dis quisque maecenas in tristique arcu
- lorem dolor fusce nec.
  * Sit pretium quisque in wisi lobortis.
  * Ac curabitur elementum.
    ** Platea ad diam arcu vitae fermentum.
       1. Eu lorem nulla.
       2. In suspendisse at dapibus nostra est.
          .. Montes adipiscing sodales.
    ** Pellentesque nibh sit.

- Augue et dui malesuada purus.

  If a list item is followed
  by an indented paragraph the
  indented paragraph is
  included in the list item.

</td>
    </tr>
  </tbody>
</table>'

{generate-rendered-example-2|tables-example}

The use of inline HTML for tables instead of a Rimu-specific table
syntax was a deliberate design decision:

- A large number of formatting options (e.g. for headers and footers;
  cell widths, heights, alignment and spans) are required to
  accommodate all but the simplest of tables. This makes for a complex
  and noisy syntax -- precisely what we're trying to avoid.
- Coming up with a syntax that is both recognizably tabular and easily
  written is difficult -- imagine trying to write the above example in
  a way that maintains the side-by-side cell layout.
- At first blush tables come across as a hugely useful feature, but
  most documentation makes surprising little use of tables.


## Macro meta-programming
You can define macros which, when invoked, generate other macros. A
good example of this is the generation of document section headers,
links and table of contents entries from a section identifier and
title.

.-macros
{meta-macros-example} = '// toc macro generates section TOC entry, link macro, header macro.
// $1 = section ID, $2 = section title.
{toc} = '{$1} = '<#$1|$2>' \\
{$1-header} = '.#$1
## $2' \\
{$1}
'\

#### Table of Contents
{toc|section1|Section One}
{toc|section2|Section Two}

{section1-header}
Link to {section2}.

{section2-header}
Link to {section1}.'

{generate-rendered-example-2|meta-macros-example}

NOTE: The backslash character is used to continue macro definition
lines that end with a single-quote.


## Macro tips
- Use the `&vert;` character entity to display a `|` character inside
  a macro parameter value.
- Closing block delimiters must be explicit and cannot be sourced from
  a macro invocation (because Rimu elements are recognized before
  macro expansion).
- The contents of a macro can be rendered verbatim in a code block by
  enabling macro expansion. For example:
..
``
.-macros
```
{example-42}
```
``

The contents of `\{example-42}` are not subject to further macro expansion.
..
- Definition elements cannot be prefixed with an Inclusion/Exclusion
  macro (see <#conditional-inclusion|Conditional Inclusion>).
- Macro invocations in macro definition values are expanded when the
  macro is declared, not when it is invoked. You can defer evaluation
  until the macro is invoked by escaping macro invocations or (in the
  case of multi-line definitions) by using the `-macros` _Block
  Attributes_ option. For example this Rimu markup:
..
```
{m1} = 'foo'
{m2} = '{m1} \{m1}'
{m2}

{m1} = 'bar'
{m2}
```

Generates:

```
<p>foo foo</p>
<p>foo bar</p>
```
..


## List item counters
In addition to the _verse_ and _sidebar_ CSS styles the  {rimuc} tool
`--styled` option also includes CSS classes for counting list items
and for numbering labeled list items.

{list-item-counters-example} = '#### Numbered labeled list
.dl-numbered
One:: Item one.
Two:: Item two.
Three:: Item three.

.dl-counter
labeled list items.

#### Counted unordered list
- Item one.
- Item two.
- Item three.
- Item four.

.ul-counter
unordered list items.

#### Counted ordered list
. Item one.
. Item two.

.ol-counter
ordered list items.'

{generate-rendered-example-1|list-item-counters-example}


## Horizontal labeled lists
Use the {rimuc} tool `--styled` option along with the `dl-horizontal`
CSS class to format labeled lists horizontally.

{horizontal-list-example} = '.dl-horizontal
First term::
    Definition one.
Second term::
    Definition for second term.'

{generate-rendered-example-1|horizontal-list-example}


## Include arbitrary elements in list items
An attached _Division Block_ can be used to group and append arbitrary
block elements to a list item.

{composite-list-item-example} = '- First list item.
..
Include a paragraph in the list item.

> And a Quoted paragraph.
..
- Second list item.'

{generate-rendered-example-1|composite-list-item-example}

This works because if a [Fenced Block]({reference}#fenced-blocks)
immediately follows a list item without any intervening blank lines
it will be rendered with the list item.


## Block Attributes within lists
To apply _Block Attributes_ elements to a nested list or an attached
element, envelope the Block Attributes and the attached element in a
_Division Block_ (this is a specific application of the [previous
tip](#include-arbitrary-elements-in-list-items)).

Note the use of a [nested Division block](#nested-fenced-blocks) in
the first list item in the example below.

{list-item-block-attributes-example} = '- List item with green sidebar
  styled Division block.
..
.sidebar "color:green"
...
Urna aliquam pid, pulvinar augue ut
aenean enim cum lectus sed.

Duis odio lectus, augue non egestas
amet? Magna lectus?
...
..

- List item with verse styled
  paragraph.
..
.verse
Urna aliquam pid,
pulvinar augue ut,
aenean enim cum.
..

- List item with nested numbered
  [labeled list](#example-list).
..
.dl-numbered #example-list
One:: Item one.
Two:: Item two.
Three:: Item three.
..

- List item with bold Indented
  paragraph.
..
."font-weight:bold"
  Duis in tincidunt rhoncus nascetur
  lacus!
..'

{generate-rendered-example-1|list-item-block-attributes-example}


## Section numbering
Use the {rimuc} `--section-numbers` option with the `--styled` option
to number top level _h2_ and _h3_ sub-sections. For example:

  rimuc --styled --section-numbers mydoc.rmu

The  {rimuc} `--section-numbers` option is a shortcut for
`{--section-numbers} = 'yes'`.


## Nested Fenced Blocks
[Fenced blocks]({reference}#fenced-blocks) of the same type can be
nested by using differing numbers of delimiter characters to
distinguish between them.

{nested-fenced-blocks-example} = '""
Urna aliquam pid, pulvinar augue ut
aenean enim cum lectus sed, duis odio
lectus, augue non egestas amet? Magna
lectus?

"""
Enim ultricies odio rhoncus ultrices,
adipiscing in dictumst in, enim integer
vel mauris placerat in phasellus magna.
"""

Duis in tincidunt rhoncus nascetur
lacus!
""'

{generate-rendered-example-1|nested-fenced-blocks-example}


## List termination
List termination can be forced by following the list by two or more blank
lines. This comes in handy if you want to follow one list immediately by
another or if you want to separate an Indented paragraph from a
preceding list.


## Nested list item ambiguity
To render an indented list item as an Indented paragraph change it
to a fenced code block.

{list-ambiguity-example} = '- List item.

  * Rendered as nested list item.

- List item.
``
* Rendered as code block.
``'

{generate-rendered-example-1|list-ambiguity-example}


## Controlling line breaks
There are three ways to inhibit text wrapping and preserve line
breaks:

. Terminate lines with a Rimu line break (a space followed by a
  backslash character).
. Terminate lines with an HTML break element (`<br>`).
. Inject the `line-breaks` CSS class into a Rimu block element and
  compile with the `rimuc` command `--styled` option.

{line-breaks-example} = '
Urna aliquam pid \
Aenean enim cum sed <br>
Augue non egestas amet?

.line-breaks
Urna aliquam pid
Aenean enim cum sed
Augue non egestas amet?
'

{generate-rendered-example-1|line-breaks-example}


## Controlling page breaks
You can control printer page breaks by using Rimu _Attribute Blocks_
to inject CSS
[page-break-inside](https://developer.mozilla.org/en/docs/Web/CSS/page-break-inside),
[page-break-before](https://developer.mozilla.org/en/docs/Web/CSS/page-break-before)
and
[page-break-after](https://developer.mozilla.org/en/docs/Web/CSS/page-break-after)
properties into HTML output elements.

Examples:

```
.sidebar "page-break-inside:avoid"
..
Page breaks are avoided inside
this sidebar.
..

."page-break-before:always"
### A header that starts on a new page
```

The {rimuc} tool `--styled` option includes `page-break` and
`no-page-break` CSS classes which apply `page-break-before:always` and
`page-break-inside:avoid` properties respectively.  Here is the
previous example using the {rimuc} page break classes:

```
.sidebar no-page-break
..
Page breaks are avoided inside
this sidebar.
..

.page-break
### A header that starts on a new page
```

## Controlling text alignment
You can control the horizontal alignment of flowed inline elements
(e.g. text, inline images) by injecting the CSS `text-align` property
into the container block element using the Rimu _Attribute Blocks_
element. For example:

{text-alignment-example-1} = '."text-align:center"
Enim odio ultrices'

{generate-rendered-example-1|text-alignment-example-1}

The {rimuc} tool `--styled` option includes `align-left`,
`align-center` and `align-right` CSS classes.  Here is the previous
example using the `align-center` text alignment class:

{text-alignment-example-2} = '.align-center
Enim odio ultrices'

{generate-rendered-example-1|text-alignment-example-2}


## Citing quotes and verses
The {rimuc} command `--styled` option includes the CSS _cite_ class
for attributing quotes and verses. For example:

{citation-example} = 'Quotation:

""
Enim ultricies odio rhoncus ultrices,
porttitor augue a amet, pulvinar
adipiscing in dictumst in, enim integer
vel mauris placerat in phasellus magna.
Nisi! Amet.

.cite
Anonymous
""

Verse:

.verse
..
Urna aliquam pid
Aenean enim cum sed
Augue non egestas amet?

.cite
A. N. Mouse
..'

{generate-rendered-example-1|citation-example}


## An example letter
Here's an example of a personal letter:

.-macros
{letter-example} = '
."font-family:serif; font-size:12pt;"
.....................................

."margin-left:75%"
..
24 Milky Way \
Skyhome 1234 \

17th June 2016
..

."margin-bottom:1.5em"
Mr. A. N. Mouse \
P.O. Box 42     \
Riverbank 3120

."margin-bottom:1.2em"
Dear Andrew

Mattis pellentesque in lundium lectus penatibus turpis enim enim in,
mid velit. Eu lundium. Lundium! Porttitor! Porttitor purus lacus et
odio nisi amet in magna penatibus odio amet?

In urna rhoncus! Nec scelerisque enim in turpis pid, phasellus cras,
rhoncus, egestas aliquet lundium! Lundium auctor vel natoque enim.

."margin-top:2em"
Yours sincerely \
Joe Jetson
.....................................
'

{generate-rendered-example-2|letter-example}

- The font parameters are set by enclosing the entire contents in a
  Division Block.
- If you want to control the print margins put something like this at
  the start of the document:
``
<style scoped>
@page
{ margin: 25mm 25mm 25mm 25mm; }
</style>
``


## Browser auto-refresh during Rimu development
To automatically recompile Rimu source to HTML and refresh the webpage
in the Chrome browser use [entr(1)](http://entrproject.org/) to
recompile, for example:

  ls CHANGELOG.md | entr rimuc -s CHANGELOG.md

Then use the Chrome
[LivePage](https://chrome.google.com/webstore/detail/livepage/pilnojpmdoofaelbinaeodfpjheijkbh)
extension to auto-refresh the file after it is recompiled.


