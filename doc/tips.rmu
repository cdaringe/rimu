= Rimu Tips

== HTML is valid Rimu
You are free to mix any valid HTML into a Rimu document &mdash; no
special syntax or relearning  is required (in this sense Rimu can be
thought of as an HTML superset).


== Converting Rimu to PDF
Use an HTML to PDF conversion program.
<http://www.htmldoc.org/|HTMLDOC> makes an excellent job, here is
<tips.pdf> generated with this command:

  htmldoc -f doc/tips.pdf  doc/tips.html


== Extend Rimu with Macros
Macros provide a simple, consistent mechanism for extending the Rimu
markup vocabulary. For example the following sidebar:

{sidebar} = '==== $1
.[style="padding-left: 10px; border-left: 4px solid silver;"]'
{info} = '<span class="label label-info">$1</span>'
{heads-up} = '{info|Heads up!}'
{note} = '{info|Note} <mark>$1</mark>'
{playground} = '<http://rimumarkup.org/rimuplayground.html|Rimu Playground>'

{sidebar|Fun with Macros}
..
{heads-up} See the {playground} for documentation and hands-on
experimentation.

{note|This document is not yet finished.}
..

Was generated by this Rimu markup:

--
\{sidebar} = '==== $1
.[style="padding-left: 10px; border-left: 4px solid silver;"]'
\{info} = '<span class="label label-info">$1</span>'
\{heads-up} = '\{info|Heads up!}'
\{note} = '\{info|Note} <mark>$1</mark>'
\{playground} = '<http://rimumarkup.org/rimuplayground.html|Rimu Playground>'

\{sidebar|Fun with Macros}
..
\{heads-up} See the \{playground} for documentation and hands-on
experimentation.

\{note|This document is not yet finished.}
..
--

- The `\{sidebar}` macro illustrates how you can create custom text
  blocks by styling Rimu Division Blocks.
- Note how macro definitions can span multiple lines and can contain
  any valid Rimu markup (including HTML and blank lines).


.#syntax-highlighting
== Syntax highlighting
<https://github.com/isagalaev/highlight.js|Highlight.js> is a nice
syntax highlighter that makes it trivial to add syntax highlighting to
Rimu code blocks.  The _rimuc_ tool `--styled` option includes
Highlight.js if you set the `\{highlightjs}` macro to a non-blank
value. It does this by linking to CSS and JavaScript files on the
_Highlight.js_ website.

_Highlight.js_ automatically detects the language in the code block,
but you can also set the language explicitly by setting the code block
class, for example:

  .javascript
  --
  function die(message) {
    console.error(message);
    process.exit(1);
  }
  --

Set the `no-highlight` class too disable syntax highlighting for a
code block.


== Syntax shared with Markdown
The following subset of _Rimu_ elements is compatible with Markdown:

Headers:: Headers using `#` character header IDs.

Code blocks:: Indented paragraphs (at least four spaces)
render like Markdown code blocks.

Text formatting:: `_emphasis_` and `\`code\`` quotes.

Lists::
- Bullet lists with `-` and `*` IDs.
- Numbered lists with explicit numbering.

URLs and Email addresses:: Using the `<url>` and `<email>` syntaxes.

The Rimu _README_ uses this subset for compatibility with _GitHub_ and
_npmjs.org_ README formats.


== Escaping Rimu syntax
If you have text that you don't want interpreted as a Rimu element
then you can render it literally (escape it) by prefixing the element
with a backslash character.


== Passing macro values into Rimu documents
You can do this by prepending text containing macro definitions to
Rimu source before rendering the source. The _rimuc_ command has a
`--prepend` option that can be used to do this.

Alternatively you could also put macro definitions in a
separate file and specify it as the first Rimu source file in the
_rimuc_ command.

The following example sets the HTML _title_ in the `kotlin-notes.html`
output document:

  rimuc --styled --prepend "\{title}='Kotlin Notes'" kotlin-notes.rmu


== Putting | and } characters in macro parameter values
Use the corresponding character entities `&vert;` and `&rbrace;`.


== Syntax checker
The Vim editor syntax highlighter is a big help when writing (and
reading) Rimu markup.


== The Rimu markup looks ok but the generated HTML is wrong
Using an editor with Rimu syntax highlighting support (see previous
topic) makes it much easier to spot syntax errors.


== Display contiguous block images vertically
Unless they are separated by other block elements, multiple block
image elements flow inline like text (this is because the HTML `img`
element is an "inline block" element), you can flow them vertically by
enclosing them in a _Division Block_ (HTML `div` element), for
example:

  <image:http://www.w3.org/Icons/w3c_home.png|W3C logo>
  ..
  .#big-logo [width="150"]
  <image:http://www.w3.org/Icons/w3c_home.png|W3C logo>
  ..

Renders:

<image:http://www.w3.org/Icons/w3c_home.png|W3C logo>
..
.#big-logo [width="150"]
<image:http://www.w3.org/Icons/w3c_home.png|W3C logo>
..


== Entering non-ASCII characters
A number of non-ASCII Unicode characters are commonly used for
punctuation e.g.  em dash, ellipsis and quotation characters. You can
enter these characters (or any Unicode character) as HTML character
entities or you can enter them literally.

For example, to enter an ellipsis you could either enter `&hellip;` or
you could enter the actual … character directly (alternatively you
could define a _Replacement_ for the ellipsis, see the
<#example-rimurc|Example .rimurc file> below). The mechanism for
entering Unicode characters directly will be dictated your editor:

Vim:: Enter _Ctrl+V_ followed by the the character _u_ followed by the
hexidecimal character code e.g. to enter an em dash enter _Ctrl+V_
followed by _u2014_

Linux console input:: Enter _Ctrl+Shift+U_ followed by the hexadecimal
character code followed by the _Enter_ key.

Common Unicode characters:

  Character     HTML entity    Hexadecimal code
  ---------     -----------    ----------------
  —             &mdash;        2014
  …             &hellip;       2026
  “             &ldquo;        201c
  ”             &rdquo;        201d
  →             &rightarrow;   2192

Here's a full list of
<http://dev.w3.org/html5/html-author/charref|HTML5 character
entities>.


== Whitespace and Underscores in URLs
Whitespace characters are illegal in URL paths, use _%20_ in place of
spaces, for example:

  <file:///home/srackham/books/War%20and%20Peace.pdf|War and Peace>

Underscore characters are legal in URL paths but they may be
interpreted as Rimu emphasis quotes, you can use _%5F_ in place of
underscores or escape them with backslashes.


<<#defs-warning>>
== Use Replacement and Quote definitions sparingly
Adding new Replacement and Quote definitions changes the Rimu syntax
which can produce unexpected results. It can also make your Rimu
source non-portable and less readable.


<<#example-rimurc>>
== Example .rimurc file
Here is an example `.rimurc` file containing _Macro_, _Quote_ and
_Replacement_ definitions (refer to the Rimu documentation under
_Tools_):

--
/*
  Replacements
*/
// Don't match HTML comment tags.
/(^|[^!])--(?!>)/ = '$1&mdash;'
/\.\{3}/ = '&hellip;'
/``/ = '&ldquo;'
/''/ = '&rdquo;'
// Don't match HTML close comment tag.
/(^|[^-])->/ = '$1&rightarrow;'
/<-/ = '&leftarrow;'
/\bTODO\b/ = '<b style="color: red; background-color: yellow;">TODO</b>'
/^(NOTE|IMPORTANT|WARNING|TIP):/ = '<b>$1</b>:'
// Do not process the  deprecated + line break.
/[\\ ]\+(\n|$)/g = ' +$1'

/*
  Macros
*/
\{mark} = '<mark>$1</mark>'
\{del} = '<del>$1</del>'
\{ins} = '<ins>$1</ins>'
\{sup} = '<sup>$1</sup>'
\{sub} = '<sub>$1</sub>'

/*
  Quotes
*/
~ = '<del>|</del>'
--

== Extending the Vim syntax highligher
If you've added custom replacements and quotes you can highlight them
in Vim by creating a custom `~/.vim/after/syntax/rimu.vim` syntax
file. Vim loads this file after the distributed
`~/.vim/syntax/rimu.vim` file. The following example
`~/.vim/after/syntax/rimu.vim` syntax file highlights the admonitions
replacement and the strike-through quote definitions from the previous
example `.rimurc` file:

--
syn match rimuAdmonition /^\(NOTE\|IMPORTANT\|WARNING\|TIP\):/ containedin=ALLBUT,rimuComment,rimuCodeBlock
hi def link rimuAdmonition Special

syn match rimuSpanDeleted /\\\@<!\~[ \t\n]\@!\(.\|\n\(\s*\n\)\@!\)\{-1,}[\\ \t\n]\@<!\~/ contains=rimuSpanEntity
hi def link rimuSpanDeleted Todo
--


== Understanding substitution priorities
Inline elements are processed in the following order (first to last):

. Macros
. Quotes
. Replacements
. Special characters


== Using Macro, Replacement and Quote definitions in Safe Mode
_Macro_, _Replacement_ and _Quote_ definitions are not processed in
Safe Mode. To apply Macro, Replacement or Quote definitions to Rimu
markup processed in Safe Mode you need to load the definitions with a
separate API call, for example:

--
Rimu.render(trusted_rimu_definitions); // safeMode is off by default.
var html = Rimu.render(untrusted_rimu_markup, {safeMode: 1});
--


== Escaping Macro and Replacement parameters
You can escape `$1`, `$2`... parameters in _Macro_ and _Replacement_
definitions by using the `&dollar;` character entity instead of the
dollar character.


== Modifying built-in Quotes and Replacements
You can (with <#defs-warning|caveats>) redefine built-in _Quotes_ and
_Replacements_, here are a couple of examples:

--
_ = '<em class="emphasis">|</em>'
/\\?<(\S+@[\w\.\-]+)>/g = '<a class="mailto" href="mailto:$1">$1</a>'
--

Refer to the Rimu source files
<https://github.com/srackham/rimu/blob/master/src/quotes.ts|quotes.ts>
and
<https://github.com/srackham/rimu/blob/master/src/replacements.ts|replacements.ts>.


== Mathematical formulae using MathJax
You can include math formulas written in LaTeX or MathML using
<http://www.mathjax.org/|MathJax>. The `rimuc` command `--styled`
option will include MathJax support if the `\{mathjax}` macro is
defined. For example, this Rimu source:

--
\{mathjax} = 'yes'

A LaTeX inline formula: \(\sum_\\{i=0}^n i^2 = \frac{n^2+n}m\\{2}\)

A LaTeX block formula:

\[\sum_\\{i=0}^n i^2 = \frac{n^2+n}m\\{2}\]

A MathML inline formula:
<math>
  <mi>E</mi><mo>=</mo><mrow><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow>
</math>

A MathML block formula:

<math display="block">
  <mi>E</mi><mo>=</mo><mrow><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow>
</math>
--

Renders:

{mathjax} = 'yes'

A LaTeX inline formula: \(\sum_\{i=0}^n i^2 = \frac{n^2+n}m\{2}\)

A LaTeX block formula:

\[\sum_\{i=0}^n i^2 = \frac{n^2+n}m\{2}\]

A MathML inline formula:
<math>
  <mi>E</mi><mo>=</mo><mrow><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow>
</math>

A MathML block formula:

<math display="block">
  <mi>E</mi><mo>=</mo><mrow><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow>
</math>

NOTE: Don't forget to escape any Rimu macro invocations in the math
formulas (for example, `\{i=0}` and `\{2}` in the LaTeX formula).

See the <http://docs.mathjax.org/en/latest/|latest MathJax
documentation> to learn how to use MathJax.


== Conditional inclusion
_Inclusion_ macro invocations can be used to conditionally include and
exclude lines of source text:

- If-then-else logic:

  \{macro=} Included if macro is undefined or blank.
  \{macro!} Included if macro is defined and not blank.

- Case statement logic:

  \{macro=one} Included if macro is value is 'one'.
  \{macro=two} Included if macro is value is 'two'.
  \{macro=\d+} Included if macro is value is a number.

