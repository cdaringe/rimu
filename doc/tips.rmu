= Rimu Tips

== HTML is valid Rimu
You are free to mix any valid HTML into a Rimu document &mdash; no
special syntax or relearning  is required (in this sense Rimu can be
thought of as an HTML superset).


== Converting Rimu to PDF
Use an HTML to PDF conversion program.
<http://www.htmldoc.org/|HTMLDOC> makes an excellent job, here is
<tips.pdf> generated with this command:

  htmldoc -f doc/tips.pdf  doc/tips.html


== Extend Rimu with parameterized variables
Parameterized variables provide a simple, consistent mechanism for
extending the Rimu markup vocabulary. For example the following
sidebar:

{sidebar} = '.[style="padding-left: 10px; border-left: 4px solid silver;"]'
{info} = '<span class="label label-info">$1</span>'
{heads-up} = '{info|Heads up!}'
{note} = '{info|Note} <mark>$1</mark>'
{playground} = '<http://rimumarkup.org/rimuplayground.html|Rimu Playground>'

{sidebar}
..
{heads-up} See the {playground} for documentation and hands-on
experimentation.

{note|This document is not yet finished.}
..

Was generated by this Rimu markup:

.no-highlight
--
\{sidebar} = '.[style="padding-left: 10px; border-left: 4px solid silver;"]'
\{info} = '<span class="label label-info">$1</span>'
\{heads-up} = '\{info|Heads up!}'
\{note} = '\{info|Note} <mark>$1</mark>'
\{playground} = '<http://rimumarkup.org/rimuplayground.html|Rimu Playground>'

\{sidebar}
..
\{heads-up} See the \{playground} for documentation and hands-on
experimentation.

\{note|This document is not yet finished.}
..
--


.#syntax-highlighting
== Syntax highlighting
<https://github.com/isagalaev/highlight.js|Highlight.js> is a nice
syntax highlighter that makes it trivial to add syntax highlighting to
Rimu code blocks.  The _rimuc_ tool includes Highlight.js when you use
the `--styled` option, it does this by linking to CSS and JavaScript
files on the _Highlight.js_ website.

_Highlight.js_ automatically detects the language in the code block,
but you can also set the language explicitly by setting the code block
class, for example:

  .javascript
  --
  function die(message) {
    console.error(message);
    process.exit(1);
  }
  --

Set the `no-highlight` class too disable syntax highlighting for a
code block.


== Syntax shared with Markdown
The following subset of _Rimu_ elements is compatible with Markdown:

Headers:: Single-line headers using `#` character header IDs.

Code blocks:: Indented paragraphs (at least four spaces)
render like Markdown code blocks.

Text formatting:: `_emphasis_` and `\`code\`` quotes.

Lists::
- Bullet lists with `-` and `*` IDs.
- Numbered lists with explicit numbering.

URLs and Email addresses:: Using the `<url>` and `<email>` syntaxes.

The Rimu _README_ uses this subset for compatibility with _GitHub_ and
_npmjs.org_ README formats.


== Escaping Rimu syntax
If you have text you don't want interpreted as a Rimu element then
you can disable (escape) it by prefixing the element with a backslash
character. An escaped a block element will be interpreted as a normal
paragraph (paragraphs have the lowest precedence).

There are some corner cases to be aware of:

- Escaping variable assignments and references in a block context
  using a backslash will result in them being expanded in an inline
  (paragraph) context, if you want them rendered literally in the
  paragraph context prefix a `&ZeroWidthSpace;` character entity e.g.

  &ZeroWidthSpace;\{info}

- If you escape an HTML block element with a backslash the HTML tags
  will be rendered in an inline (paragraph) context, which is probably
  not what you want -- use a `&ZeroWidthSpace;` character entity
  instead of a backslash character.

- To render a variable reference verbatim it must be escaped with a
  leading backslash character.


== Passing variable values into Rimu documents
You can do this by prepending text containing variable assignments to
Rimu source before rendering the source. The _rimuc_ command has a
`--prepend` option that can be used to do this.

Alternatively you could also put variable assignment statements in a
separate file and specify it as the first Rimu source file in the
_rimuc_ command.


== Putting | and } characters in variable parameter values
Use the corresponding character entities `&vert;` and `&rbrace;`.


== Syntax checker
The Vim editor syntax highlighter is a big help when writing (and
reading) Rimu markup.


== The Rimu markup looks ok but the generated HTML is wrong
Using an editor with Rimu syntax highlighting support (see previous
topic) makes it much easier to spot syntax errors.


== Display contiguous block images vertically
Unless they are separated by other block elements, multiple block
image elements flow inline like text (this is because the HTML `img`
element is an "inline block" element), you can flow them vertically by
enclosing them in a _Division Block_ (HTML `div` element), for
example:

  <image:http://www.w3.org/Icons/w3c_home.png|W3C logo>
  ..
  .#big-logo [width="150"]
  <image:http://www.w3.org/Icons/w3c_home.png|W3C logo>
  ..
