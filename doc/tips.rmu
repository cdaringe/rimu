= Rimu Tips


== HTML is valid Rimu
You are free to mix any valid HTML into a Rimu document &mdash; no
special syntax or relearning  is required (in this sense Rimu can be
thought of as an HTML superset).


== Converting Rimu to PDF
First convert Rimu markup to HTML using the `rimuc` tool and then
convert the HTML to PDF.  Here are a few options for converting HTML
to PDF:

. Open the HTML document in <https://www.libreoffice.org/|LibreOffice>
  Writer and export as PDF, this does a good job especially if you use
  the `rimuc` `--styled` option.
. Google's Chrome web browser has an option to print HTML to a PDF
  file, other browsers have PDF add-ons that perform the same
  function.
. Use an HTML to PDF conversion program such as
  <http://www.htmldoc.org/|HTMLDOC>.


== Extend Rimu with Macros
Macros provide a simple, consistent mechanism for extending the Rimu
markup vocabulary. For example:

.-macros
{macros-example} = '{sidebar} = '==== $1
.[style="padding-left: 10px; border-left: 4px solid silver; margin-bottom: 1em;"]'\
{info} = '<span class="label label-info">$1</span>'\
{heads-up} = '{info|Heads up!}'\
{note} = '{info|Note} <mark>$1</mark>'\
{playground} = '<http://rimumarkup.org/rimuplayground.html|Rimu
Playground>'\

{sidebar|Fun with Macros}
..
{heads-up} See the {playground} for documentation and hands-on
experimentation.

{note|This document is not yet finished.}
..'

{generate-rendered-example-2|macros-example}

- The `\{sidebar}` macro shows how you can inject CSS styles into a
  _Division Block_, but a better way of styling block elements is to
  use <#scoped-css|scoped CSS>.
- Note how macro definitions can span multiple lines and can contain
  any valid Rimu markup (including HTML and blank lines).


.#syntax-highlighting
== Syntax highlighting
<https://github.com/isagalaev/highlight.js|Highlight.js> is a nice
syntax highlighter that makes it trivial to add syntax highlighting to
Rimu Code blocks and Indented paragraphs.  The _rimuc_ tool `--styled`
option includes Highlight.js if you set the `\{--highlightjs}` macro to
a non-blank value. It does this by linking to CSS and JavaScript files
on the _Highlight.js_ website.

_Highlight.js_ automatically detects the language in Code Blocks and
Indented Paragraphs. You can also set the language explicitly by
adding a code block class, for example:

{highlightjs-example} = '\{--highlightjs} = 'yes'\

.javascript
--
function die(message) {
  if (message) {
    console.error(message);
  }
  else {
    console.error('fatal error');
  }
  process.exit(1);
}
--'

{generate-rendered-example-1|highlightjs-example}

Set the `no-highlight` class to disable syntax highlighting for a code
block.  Adding the `no-highlight` class to all code blocks using
_Delimited Block Definitions_ effectively turns off auto-highlighting
unless the language class is explicitly set:

  |code| = '<pre class="no-highlight"><code>|</code></pre>'
  |indented| = '<pre class="no-highlight"><code>|</code></pre>'


== Syntax shared with Markdown
The following subset of _Rimu_ elements is compatible with Markdown:

Headers:: Headers using `#` character header IDs.

Code blocks:: Indented paragraphs (at least four spaces)
render like Markdown code blocks.

Text formatting:: `_emphasis_` and `\`code\`` quotes.

Lists::
- Bullet lists with `-` and `*` IDs.
- Numbered lists with explicit numbering.

URLs and Email addresses:: Using the `<url>` and `<email>` syntaxes.

Other elements::
Rimu can be extended to recognise additional Markdown syntax using
Rimu _Quote_ and _Replacement_ definitions -- the
<#example-rimurc|example .rimurc file> implements `**strong**`,
`[link-text](url)` and `[alt-text](image-url)` Markdown elements.

The Rimu _README_ uses this subset for compatibility with _GitHub_ and
_npmjs.org_ README formats.


== Escaping Rimu syntax
If you have text that you don't want interpreted as a Rimu element
then you can render it literally (escape it) by prefixing the element
with a backslash character.


== Passing macro values into Rimu documents
You can do this by prepending text containing macro definitions to
Rimu source before rendering the source. The _rimuc_ command has a
`--prepend` option that can be used to do this.

Alternatively you could also put macro definitions in a
separate file and specify it as the first Rimu source file in the
_rimuc_ command.

The following example sets the HTML _title_ in the `kotlin-notes.html`
output document:

  rimuc --styled --prepend "{title}='Kotlin Notes'" kotlin-notes.rmu


== Syntax checker
The Vim editor syntax highlighter is a big help when writing (and
reading) Rimu markup.


== The Rimu markup looks ok but the generated HTML is wrong
Using an editor with Rimu syntax highlighting support (see previous
topic) makes it much easier to spot syntax errors.


== Display contiguous block images vertically
Unless they are separated by other block elements, multiple block
image elements flow inline like text (this is because the HTML `img`
element is an "inline block" element), you can flow them vertically by
enclosing them in a _Division Block_ (HTML `div` element). For
example:

{block-images-example} = '<image:http://www.w3.org/Icons/w3c_home.png|W3C logo>
..
.#big-logo [width="150"]
<image:http://www.w3.org/Icons/w3c_home.png|W3C logo>
..'

{generate-rendered-example-2|block-images-example}


== Entering non-ASCII characters
A number of non-ASCII Unicode characters are commonly used for
punctuation e.g.  em dash, ellipsis and quotation characters. You can
enter these characters (or any Unicode character) as HTML character
entities or you can enter them literally.

For example, to enter an ellipsis you could either enter `&hellip;` or
you could enter the actual … character directly (alternatively you
could define a _Replacement_ for the ellipsis, see the
<#example-rimurc|Example .rimurc file> below). The mechanism for
entering Unicode characters directly will be dictated your editor:

Vim:: Enter _Ctrl+V_ followed by the the character _u_ followed by the
hexidecimal character code e.g. to enter an em dash enter _Ctrl+V_
followed by _u2014_

Linux console input:: Enter _Ctrl+Shift+U_ followed by the hexadecimal
character code followed by the _Enter_ key.

Common Unicode characters:

  Character     HTML entity    Hexadecimal code
  ---------     -----------    ----------------
  —             &mdash;        2014
  …             &hellip;       2026
  “             &ldquo;        201c
  ”             &rdquo;        201d
  →             &rightarrow;   2192

Here's a full list of
<http://dev.w3.org/html5/html-author/charref|HTML5 character
entities>.


== Whitespace and Underscores in URLs
Whitespace characters are illegal in URL paths, use _%20_ in place of
spaces, for example:

  <file:///home/srackham/books/War%20and%20Peace.pdf|War and Peace>

Underscore characters are legal in URL paths but they may be
interpreted as Rimu emphasis quotes, you can use _%5F_ in place of
underscores or escape them with backslashes.


.#defs-warning
== Use Replacement and Quote definitions sparingly
Adding new Replacement and Quote definitions changes the Rimu syntax
which can produce unexpected results. It can also make your Rimu
source non-portable and less readable.


.#example-rimurc
== Example .rimurc file
Here is an example `.rimurc` file containing _Macro_, _Quote_ and
_Replacement_ definitions (refer to the Rimu documentation under
_Tools_):

--
/*
  ~/.rimurc file containing custom Rimu Markup definitions used by
  rimuc command.
*/


/*
  Replacements
*/
// Don't match HTML comment tags.
/\\?(^|[^!])--(?!>)/ = '$1&mdash;'
/\\?\.{3}/ = '&hellip;'
/\\?``/ = '&ldquo;'
/\\?''/ = '&rdquo;'
// Don't match HTML close comment tag.
/\\?(^|[^-])->/ = '$1&rightarrow;'
/\\?<-/ = '&leftarrow;'

/\\?\bTODO\b/ = '<b style="color: red; background-color: yellow;">TODO</b>'
/^\\?(NOTE|IMPORTANT|WARNING|TIP):/ = '<b>$1</b>:'

// Encodes (most) raw HTTP URLs as links.
/(^|[^<])\b((?:http|https):\/\/[^\s"']*[^\s"',.;?)])/ = '$1<a href="$2">$2</a>'

// Markdown [link-text](url) syntax.
/\\?\[([\s\S]+?)\]\s*\((\S+?)\)/ = '<a href="$2">$1</a>'

// Markdown ![alt-text](image-url) syntax.
/\\?!\[([\s\S]+?)\]\s*\((\S+?)\)/ = '<img src="$2" alt="$1">'


/*
  Macros
*/
{mark} = '<mark>$1</mark>'
{del} = '<del>$1</del>'
{ins} = '<ins>$1</ins>'
{sup} = '<sup>$1</sup>'
{sub} = '<sub>$1</sub>'


/*
  Quotes
*/
~ = '<del>|</del>'

// Markdown compatible strong quote.
** = '<strong>|</strong>'


/*
  Highlight.js
*/
// Turn off auto-hightlighting.
|code| = '<pre class="no-highlight"><code>|</code></pre>'
|indented| = '<pre class="no-highlight"><code>|</code></pre>'
--

== Extending the Vim syntax highlighter
If you've added custom replacements and quotes you can highlight them
in Vim by creating a custom `~/.vim/after/syntax/rimu.vim` syntax
file. Vim loads this file after the distributed
`~/.vim/syntax/rimu.vim` file. The following example
`~/.vim/after/syntax/rimu.vim` syntax file highlights the admonitions
replacement and the strike-through quote definitions from the previous
example `.rimurc` file:

--
" ~/.vim/after/syntax/rimu.vim
"
" Custom Vim highlighting for custom syntax defined in ~/.rimurc
"

" Admonishments.
syn match rimuAdmonition /^\([A-Z]\+\):/ containedin=ALLBUT,rimuComment,rimuCodeBlock
hi def link rimuAdmonition Special

" ~ quote.
syn match rimuSpanDeleted /\\\@<!\~[ \t\n]\@!\(.\|\n\(\s*\n\)\@!\)\{-1,}[\\ \t\n]\@<!\~/ contains=rimuSpanEntity
hi def link rimuSpanDeleted Todo

" Raw HTTP URLs as links.
syn match rimuSpanRawURL /[\\<]\@<!\(http\|https\):\/\/[^\s"]*[^\s",.;?)]/
hi def link rimuSpanRawURL Title
--


== Understanding substitution priorities
Inline elements are processed in the following order (first to last):

. Macros
. Quotes
. Replacements
. Special characters

Substitutions in multi-line block elements can be controlled using
_block-options_ in the _Block Attributes_ element.


== Using Macro, Replacement and Quote definitions in Safe Mode
_Macro_, _Replacement_ and _Quote_ definitions are not processed in
Safe Mode. To apply Macro, Replacement or Quote definitions to Rimu
markup processed in Safe Mode you need to load the definitions with a
separate API call, for example:

--
Rimu.render(trusted_rimu_definitions); // safeMode is off by default.
var html = Rimu.render(untrusted_rimu_markup, {safeMode: 1});
--


== Modifying built-in Quotes and Replacements
You can (with <#defs-warning|caveats>) redefine built-in _Quotes_ and
_Replacements_, here are a couple of examples:

--
_ = '<em class="emphasis">|</em>'
/\\?<(\S+@[\w\.\-]+)>/g = '<a class="mailto" href="mailto:$1">$1</a>'
--

Refer to the Rimu source files
<https://github.com/srackham/rimu/blob/master/src/quotes.ts|quotes.ts>
and
<https://github.com/srackham/rimu/blob/master/src/replacements.ts|replacements.ts>.


== Mathematical formulae using MathJax
You can include math formulas written in LaTeX or MathML using
<http://www.mathjax.org/|MathJax>. The `rimuc` command `--styled`
option will include MathJax support if the `\{--mathjax}` macro is
defined. Examples:

.-macros
{mathjax-example} = '{--mathjax} = 'yes'\

.-macros
A LaTeX inline formula: \(\sum_{i=0}^n i^2 = \frac{n^2+n}m{2}\)

A LaTeX block formula:

.-macros
\[\sum_{i=0}^n i^2 = \frac{n^2+n}m{2}\]

A MathML inline formula:
<math>
  <mi>E</mi><mo>=</mo><mrow><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow>
</math>

A MathML block formula:

<math display="block">
  <mi>E</mi><mo>=</mo><mrow><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow>
</math>'

{generate-rendered-example-2|mathjax-example}

NOTE: Macro expansion has been disabled in LaTeX formulas to stop
`\{i=0}` and `\{2}` from being mistaken for Rimu macro invocations.

See the <http://docs.mathjax.org/en/latest/|latest MathJax
documentation> to learn how to use MathJax.


== Inline Comments
Rimu comment elements are block elements and cannot be used inline --
use an undefined macro to exclude inline text from elements that
support macro expansion (e.g. paragraphs, lists, HTML blocks). It is
customary to use the _Undefined_ `--` macro for this purpose:

  {--!}This line is skipped,
  and {--|this text is skipped}.

See also <#conditional-inclusion|Conditional Inclusion>.


.#conditional-inclusion
== Conditional Inclusion
Macro invocations can be used to conditionally include source text.

Single-line Blocks::
..
Single-line block elements (e.g. Headers, Block Attributes,
single-line Paragraphs and single-line HTML blocks) can be
conditionally excluded by prefixing an _Inclusion_ macro invocation.
For example:

  {underscore!}<script src="underscore-min.js"></script>

This works because lines (in a block context) that begin with a macro
invocation are initially processed as _Line Macro_ elements.
..

Delmited Blocks, HTML Blocks and Paragraphs::
..
To conditionally exclude these multi-line block elements enable the
`+skip` option with a preceding _Attribute Block_ element. For
example:

  {macro!}.+skip
  *Lorem ipsum dolor*. Sit amet venenatis. Erat nulla arcu. Lorem
  luctus sem. Mauris vitaei ipsum.

If `macro` is defined and not blank then the `.+skip` Attribute Block
will be processed which causes the following paragraph to be skipped.
..

Inline content::
..
If an element supports macro expansion (e.g. Paragraphs and HTML
Blocks), then block content can be conditionally included using:

. _Inclusion_ macro invocations to exclude lines of text, for example: 

  {macro=} Line is included if macro is undefined or value is blank.
  {macro!} Line is included if macro is defined and value not blank.
  {macro=one} Line is included if macro value is 'one'.
  {macro=two} Line is included if macro value is 'two'.
  {macro=\d+} Line is included if macro value is a number.

. _Parametrized_  macro invocations to exclude arbitrary portions of
  inline text, for example:
...
--
{macro} = ''
Mauris vitae ipsumi lacus vestibulum sem. {macro|This text
is excluded}

{macro} = '$1'
Mauris vitae ipsumi lacus vestibulum sem. {macro|This text
is included.}
--
So long as the `macro` value is undefined or blank the text is
excluded -- set it to `$1` and the text will be included. Note that
parameter text can encompass multiple lines.
...
..


== Tables
Create tables using the HTML table syntax (Rimu has no special syntax
for tables).

You can use Rimu markup in table cells, just remember that HTML blocks
must start at the left margin and end with a blank line.

The `rimuc` `--styled` option includes
<http://getbootstrap.com/|Bootstrap> so you can use
<http://getbootstrap.com/css/#tables|Bootstrap tables classes> to
create nicely formatted tables. For example:

.-macros
{tables-example} = '<table class="table table-bordered">
  <tbody>
    <tr>
<td style="width: 50%;">

.text-info
*Lorem ipsum dolor*. Sit amet venenatis. Erat nulla arcu. Lorem luctus
sem. Mauris vitae ipsum. Donec dui ac ridiculus quisque proin.
Lobortis lacus vestibulum sem.

===== Normal paragraph
Lorem ipsum dolor. Sit `amet venenatis`. Erat nulla arcu. Lorem luctus
sem. _Mauris vitae_ ipsum. Donec dui ac ridiculus {mark|quisque} proin.
Lobortis lacus vestibulum sem.

===== Indented paragraph
  Neque a massa. Porttitor consectetuer commodo. Nunc nulla tempor
  tempor enim ornare. Mi nam id. Ornare mauris tempor. Pede mauris
  sed.  Scelerisque feugiat massa alias.

</td>
<td style="width: 50%;">

- Lorem ipsum dolor sit amet dis quisque maecenas in tristique arcu
- lorem dolor fusce nec.
  * Sit pretium quisque in wisi lobortis.
  * Ac curabitur elementum.
    ** Platea ad diam arcu vitae fermentum.
       1. Eu lorem nulla.
       2. In suspendisse at dapibus nostra est.
          .. Montes adipiscing sodales.
    ** Pellentesque nibh sit.

- Augue et dui malesuada purus.

  If a list item is followed by an indented paragraph the indented
  paragraph is included in the list item.

</td>
    </tr>
  </tbody>
</table>'

{generate-rendered-example-2|tables-example}


== Macro meta-programming
You can define macros which, when invoked, generate other macros. A
good example of this is the generation of document section headers,
links and table of contents entries from a section identifier and
title:

.-macros
{meta-macros-example} = '// Macro to generate section link, header and TOC entry macros.
// $1 = section ID, $2 = section title.
{section-definition} = '\
{$1} = '<#$1|$2>' \\
{$1-header} = '.#$1
== $2' \\
{$1-toc} = '{$1} \' \\
'\
// Generate section macros.
{section-definition|section1|Section One}
{section-definition|section2|Section Two}

==== Table of Contents
{section1-toc}
{section2-toc}

// Section One section.
{section1-header}
Link to {section2}.

// Section Two section.
{section2-header}
Link to {section1}.'

{generate-rendered-example-2|meta-macros-example}

NOTE: The backslash character is used to continue macro definition
lines that end with a single-quote.


== Macro tips
- Use the `&vert;` character entity to display a `|` character inside
  a macro parameter value.
- Closing block delimiters must be explicit and cannot be sourced from
  a macro invocation (because Rimu elements are recognized before
  macro expansion).
- The contents of a macro can be rendered verbatim in a code block by
  enabling macro expansion. For example:
..
----
.+macros
--
{example-42}
--
----

The contents of `\{example-42}` are not subject to macro expansion.
..
- Definition elements cannot be prefixed with an Inclusion macro (see
  <#conditional-inclusion|Conditional Inclusion>).
- Macro invocations in macro definition values are expanded when the
  macro is declared, not when it is invoked. You can defer evaluation
  until the macro is invoked by escaping macro invocations or (in the
  case of multi-line definitions) by using the `-macros` _Block
  Attributes_ option. For example this Rimu markup:
..
--
{m1} = 'foo'
{m2} = '{m1} \{m1}'
{m2}

{m1} = 'bar'
{m2}
--

Generates:

--
<p>foo foo</p>
<p>foo bar</p>
--
..


.#scoped-css
== Use scoped CSS to generate custom styled elements
HTML5's <http://www.w3schools.com/tags/att\_style\_scoped.asp|scoped
CSS attribute> allows you to define CSS outside the document header.
This allows you to include CSS in the body of a Rimu document which is
very handy for tweaking the default CSS and for styling Rimu block
elements. Examples:

{scoped-css-example} = '<style type="text/css" scoped>
.verse {
  margin: 1.5em 20px;
}
div.verse p, p.verse {
  font-family: serif;
  white-space:pre;
}
.sidebar {
  border: 1px solid silver;
  border-radius:4px;
  background: #ffffee;
  padding: 10px;
  margin: 1.5em 20px;
}
div.sidebar *:first-child {
  margin-top: 0.2em;
}
</style>

.verse
Neque a massa.
Porttitor consectetuer commodo.

.verse
..
==== Lorum Ipsum
Neque a massa.
Porttitor consectetuer commodo.

Nunc mauris tempor.
Pede mauris sed.
Scelerisque feugiat massa alias.
..

.sidebar
Neque a massa.
Porttitor consectetuer commodo.

.sidebar
..
==== Lorum Ipsum
Neque a massa.
Porttitor consectetuer commodo.

Nunc mauris tempor.
Pede mauris sed.
Scelerisque feugiat massa alias.
..'

{generate-rendered-example-1|scoped-css-example}

- The above _verse_ and _sidebar_ CSS styles are automatically included when
  you use the _rimuc_ tool `--styled` option.
- HTML5 stipulates that scoped _style_ element must be the first child element
  -- in practice  most browsers don't care where it occurs.


== List item counters
In addition to the _verse_ and _sidebar_ CSS styles the  _rimuc_ tool
`--styled` option also includes CSS classes for counting list items
and for numbering labeled list items:

{list-item-counters-example} = '==== Numbered labeled list
.dl-numbered
One:: Item one.
Two:: Item two.
Three:: Item three.

.dl-counter
labeled list items.

==== Counted unordered list
- Item one.
- Item two.
- Item three.
- Item four.

.ul-counter
unordered list items.

==== Counted ordered list
. Item one.
. Item two.

.ol-counter
ordered list items.'

{generate-rendered-example-1|list-item-counters-example}


== Section numbering
If you define the `--section-numbers` macro the  _rimuc_ tool
`--styled` option will emit CSS to automatically number _h2_ sections
and _h3_ sub-sections. You need to define the `--section-numbers`
macro on the command-line (using the `--prepend` option) or in your
`.rimurc` file. For example:

  rimuc --styled --prepend "{--section-numbers}='yes'" mydoc.rmu 

